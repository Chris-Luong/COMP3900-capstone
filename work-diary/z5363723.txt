Week 1:
We formed the group, decided on the project and set up the meeting times. I spent some time reading through the project specs, the requirements
and the proposal spec.

Week 2:
Tuesday: We allocated some work to every group member and decided on the parts to complete as a group - user stories and database designs.
We discussed about the objective and the overview of the wait management system and understand the problems that we need to solve.
Wednesday: We spent some time writing the user stories, picked and summarised the functionalities based on the user stories. We discussed the novel features
with our tutor and decided to research and elaborate on the novel features further to discuss it in the next meeting. Then, we allocated
the work for everyone to expand on the functionalities. I was tasked to finish the "Menu and Ordering Process" functionality.
Saturday: We finished consolidating the core functionalities, decided that we are going to do 1-1 mapping between the user 
and the Order. I was tasked to finish the "User Stories and Backlog" part of the proposal. While drafting the product backlog and sprints,
I thought it would be good to confirm the sprint structure with the team. 

Week 3:
Monday: We drafted the ER diagrams for the database models as a group, we decided on the languages and frameworks we are going to use.
We decided on doing 5 sprints and the functionality scopes for the first sprint. I was tasked to finish "Sprints" part of the proposal. TODO: After finalising the final 
novel features, I need to add the user stories for these features to the product backlog. Check that the user stories in the proposal 
are the correct and structured.
Wednesday: We worked on finalising the proposal and refine the user stories. I was assigned to work on describing how the novel features differentiate our
system to the existing systems. From the lecture, we should describe the acceptance criteria in the Jira tickets. So, I spent 
some time adding the acceptance criteria to the Jira tickets.
Sunday: Discussed to do database setups and set up the local dev environment for backend.

Week 4
Monday: We discussed what to finish by Wednesday. For the backend, we will finish a backend API and set up the database. I discussed with 
Rod, he will be finishing the datbaase setup and I will do the login function API.
Wednesday: We discussed what to finish by Saturday and we aim for finishing all backend APIs by Saturday so that 
we can integrate with the frontend on the following days. After the meeting, I spent some time setting up the Msyql database
on my local dev enviroment. I spent a few hours fixing the backend so that it is connecting to the database.
Thursday: Worked on the Login API and set up swagger for backend testing. 
Friday: Login API is complete and tested successfully.
Saturday: We discussed about how to implement the guest profile. I raised a pull request to merge backend-loginn branch to master.


Week 5
Tuesday: We helped Alan to prepare for the demo.
Wednesday: Had the demo for the first sprint. After the demo, we had the retrospective session where we talked about
how to improve and what we did good. For backend work, we completed very efficiently. So, might help out with frontend 
for the next sprint. Also, I will be doing the task breakdown for the next time for better time and task tracking.
Saturday: we divided up into two teams. I will be doing menu ordering epic backend work. 


Week 6:
Monday: Reviewed Alan's branch for viewing all the menu items, thought I will try backend and frontend, that is, do fullstack. 
This way, it would be much easier to test so that frontend doesn't need to spend time understanding backend to test.
So, I communicated with the team that I will be picking up a few user stories in the Ordering Epic and implement fullstack.
Wednesday: Finished implementing and testing the ordering functionalities for backend: view all manu itmes in the order and add menu items into the order.
Tomorrow's plan is to implement the frontend.
Thursday: Implemented the modal pop up for individual menu items and enabling users to select the quantity and adding to the cart. 
Saturday: Refactored the backend such that the order table splits to two tables - orders which tracks orderId and orderItems which
tracks mappings of orderId - itemId. We have decided to let the frontend to do updating and removing order. So, when the user submits the order, 
backend inserts orderItems and created an orderId.

Week 7:
Wednesday: Finished the backend implementations for removing the orders by orderId.
Friday: Finished and tested the implementations for viewing all pending orders and refactored the orderItems table

Week8:
Tuesday: We helped Alan to prepare for the demo and fixed a few backend bugs regarding errors when deleting categories. Will be creating 
some dummy data for next sprint for easier debugging and preparing for demo. 
Wednesday: We finished the demo and did the retrospective session afterwards. THen, we allcoated the work for the next sprint. I will be 
responsible for the table booking user stories for backend. So, I spent some time looking through the user stories and wrote down what I should 
do for backend.
Friday & Saturday: Working on the structuring and desiging the tables for table bookings. We decided to only allow users to book tables for a
fixed duration. Also implemented the backend API for creating bookings given the userId, datetime and number of guests. Tomorrow 
will be testing it.
Sunday: Implemented the backend GET request for viewing the table details for wait stuff. Tested the APIs successfully. Discussed with the team 
and we need to allow customers to book more than 1 hours, so need to add "numHours" to the field of POST request for creating bookings. This means 
that I need to restructure the database. 

Week9:
Monday: Added the bookingEnd for "bookings" table to accomodate users' needs to book more than 1 hours. Updated the POST API /bookings/create
to fetch available tables that have non-overlapping booking time and to include end_time in the insert query.
Updated the GET API /bookings/:date to also include the bookingEnd in the response body.
Tuesday: Chris requested GET API to include date and accountId parameter, so I udpated the /bookings route. Also discussed with the team about
the table booking for guest check in and we agreed to create a guest account and book available table for 1 hour. 
Wednesday: We discussed about what we need to do for the report, I am assigned the work to finish backend for table bookings including verifyBookingByAccount,
getBookingsByStatus and updateBookingToSeated. I am also going to review my code and add comments where necessary.
Friday: Worked on and tested the endpoints: /bookings/update, /bookings/verify and also updated bookings tables to include field status.